{"title":"java语言基础","uid":"a8aa18bf0cb5c42542c071a3bedb754a","slug":"java语言基础","date":"2023-09-01T02:01:41.000Z","updated":"2023-09-08T04:02:13.515Z","comments":true,"path":"api/articles/java语言基础.json","keywords":null,"cover":[],"content":"<p>我超，java</p>\n<span id=\"more\"></span>\n<h2 id=\"Java程序的基本结构\"><a href=\"#Java程序的基本结构\" class=\"headerlink\" title=\"Java程序的基本结构\"></a>Java程序的基本结构</h2><p>Java语言的源程序是一个或多个以.java为扩展名的文件，Java源程序中可包含三个基本部分:</p>\n<ul>\n<li><p>一个包声明package语句(可选)</p>\n<pre><code>package database;\n</code></pre><ul>\n<li>包是类和接口的集合，即为类库</li>\n<li>用类库管理类，方便对类和接口管理，减少类名、接口名之间的重名问题</li>\n<li>Java的类都包含在类库中,package语句为类、接口(或者说是字节码文件)来指定所属的类库(包)。</li>\n<li>在一个源程序中，只能有一个包声明语句，且是程序的第一条语句。</li>\n</ul>\n</li>\n<li><p>任意数量的引入import语句(可选)</p>\n<pre><code>import java.applet.Applet;\n</code></pre><ul>\n<li><p>源程序中可以有任意条import引入语句</p>\n</li>\n<li><p>当源程序在编译时，会将需要的在引入语句中的类引入到程序中</p>\n</li>\n<li><p><strong>import语句在包语句后，所有类或接口之前</strong><br>import语句有两种形式:</p>\n<pre><code> import &lt;packagename&gt;.&lt;classname&gt;        // 引入&lt;classname&gt;\n import &lt;packagename&gt;.*                    // 引入所有类\n</code></pre></li>\n</ul>\n</li>\n<li><p>类和接口声明</p>\n<pre><code>class Hello&#123; ... &#125;\ninterface DataCollect&#123; ...&#125;\n</code></pre><ul>\n<li>类和接口是程序的基本组成单元</li>\n<li>类是由成员变量和成员方法等组成，表示了对象的基本属性和行为</li>\n<li>接口表现了对象所具有的行为规范</li>\n<li><strong>源程序中至少有一个类或接口创建</strong></li>\n</ul>\n</li>\n</ul>\n<p>在一个源程序中，只能有一个包声明语句，而源程序中可以有任意个import引入语句。当源程序在编译时,对不需要引入的类不会引入。类的体是由成员变量和成员方法等组成的，在一个Java源程序中，<strong>只能有一个类可以被声明为public(公共)类。若某个类中有<code>main()</code>方法，则声明该类为public类</strong>。若想创建多个public类，应该为每一类单独地创建一个源程序。应该用public修饰的类，即公共类作为源程序的文件名，并需要注意的是<strong>文件名要和该类名的大小写保持一致</strong>。</p>\n<p>在应用程序Application中，<code>main()</code>方法是程序运行的入口：</p>\n<pre><code>public static void main(String args[])\n</code></pre><p>比如九九乘法表：</p>\n<pre><code>public class MultiplicationTable &#123;\n    public static void main(String[] args) &#123;\n        for (int i = 1; i &lt;= 9; i++) &#123;\n            for (int j = 1; j &lt;= i; j++) &#123;\n                System.out.print(j + &quot; * &quot; + i + &quot; = &quot; + (i * j) + &quot;\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n    &#125;\n&#125;\n</code></pre><p><img src=\"https://pic.imgdb.cn/item/64f48a54661c6c8e54178006.png\" alt=\"\"></p>\n<h3 id=\"Java中的注释\"><a href=\"#Java中的注释\" class=\"headerlink\" title=\"Java中的注释\"></a>Java中的注释</h3><p>和C/C++一样，但在javadoc多了一种注释：</p>\n<pre><code>/** */\n</code></pre><h2 id=\"Java字符集\"><a href=\"#Java字符集\" class=\"headerlink\" title=\"Java字符集\"></a>Java字符集</h2><h3 id=\"符号集\"><a href=\"#符号集\" class=\"headerlink\" title=\"符号集\"></a>符号集</h3><p>符号是构成程序的基本单位。Java采用的是Unicode码，又称统一码字符集，使用16位存储空间，支持多种语言，更具有国际化特性。当Unicode中的高8位为0时，则低8位的编码与ASCII码相同。ASCII码是用8位存储空间。</p>\n<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><ul>\n<li>48个关键字：abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。</li>\n<li>2个保留字（现在没用以后可能用到作为关键字）：goto、const。</li>\n<li>3个特殊直接量：true、false、null。 </li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>意思</th>\n<th>备注，常用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>公有的</td>\n<td>可跨包，（默认选择）</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>受保护的</td>\n<td>当前包内可用</td>\n</tr>\n<tr>\n<td>private</td>\n<td>私有的</td>\n<td>当前类可用</td>\n</tr>\n<tr>\n<td>class</td>\n<td>类</td>\n<td><code>public class A()&#123;&#125;</code> 花括号里有已实现方法体，类名需要与文件名相同</td>\n</tr>\n<tr>\n<td>interface</td>\n<td>接口</td>\n<td><code>public interface B()&#123;&#125;</code> 花括号里有方法体，但没有实现，方法体句子后面是英文分号“:”结尾</td>\n</tr>\n<tr>\n<td>abstract</td>\n<td>声明抽象</td>\n<td><code>public abstract class C()&#123;&#125;</code> 介于类与接口中间，可以有也可以没有已经实现的方法体</td>\n</tr>\n<tr>\n<td>implements</td>\n<td>实现</td>\n<td>用于类或接口实现接口<code>public class A interface B()&#123;&#125;</code></td>\n</tr>\n<tr>\n<td>extends</td>\n<td>继承</td>\n<td>用于类继承类 <code>public class A extends D()&#123;&#125;</code></td>\n</tr>\n<tr>\n<td>new</td>\n<td>创建新对象</td>\n<td><code>A a=new A();</code> A表示一个类</td>\n</tr>\n<tr>\n<td>import</td>\n<td>引入包的关键字</td>\n<td>当使用某个包的一些类时，仅需类名 然后使用ctrl+shift+o或者选定类名（类或属性或方法）按住ctrl+单击 即可自动插入类所在的包。如：JFrame 快捷键之后自动加入<code>import javax.swing.JFrame;</code></td>\n</tr>\n<tr>\n<td>package</td>\n<td>定义包的关键字</td>\n<td>将所有有关的类放在一个包类以便查找修改等。如：<code>package javake.flycat.draw002;</code></td>\n</tr>\n<tr>\n<td>byte</td>\n<td>字节型</td>\n<td>8bit</td>\n</tr>\n<tr>\n<td>char</td>\n<td>字符型</td>\n<td>16bit</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>布尔型</td>\n<td>—（注意，这里的值只能为true和false，不能是0和1）</td>\n</tr>\n<tr>\n<td>short</td>\n<td>短整型</td>\n<td>16bit</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整型</td>\n<td>32bit</td>\n</tr>\n<tr>\n<td>float</td>\n<td>浮点型</td>\n<td>32bit</td>\n</tr>\n<tr>\n<td>long</td>\n<td>长整型</td>\n<td>64bit</td>\n</tr>\n<tr>\n<td>double</td>\n<td>双精度</td>\n<td>64bit</td>\n</tr>\n<tr>\n<td>void</td>\n<td>无返回</td>\n<td>public void A(){}  其他需要返回的经常与return连用</td>\n</tr>\n<tr>\n<td>null</td>\n<td>空值</td>\n<td></td>\n</tr>\n<tr>\n<td>true</td>\n<td>真</td>\n<td></td>\n</tr>\n<tr>\n<td>false</td>\n<td>假</td>\n<td></td>\n</tr>\n<tr>\n<td>if</td>\n<td>如果</td>\n<td>if(){} 如果小括号里面怎么怎么样 花括号就怎么怎么样</td>\n</tr>\n<tr>\n<td>else</td>\n<td>否则，或者</td>\n<td>常与if连用，用法相同</td>\n</tr>\n<tr>\n<td>while</td>\n<td>当什么的时候</td>\n<td>while 怎么样就do什么  while(){}</td>\n</tr>\n<tr>\n<td>for</td>\n<td>满足三个条件时</td>\n<td>for ( ; ; ){}</td>\n</tr>\n<tr>\n<td>switch</td>\n<td>开关</td>\n<td>switch(表达式) { case 常量表达式1:语句1; …. case 常量表达式2:语句2; default:语句; }</td>\n</tr>\n<tr>\n<td>case</td>\n<td>返回开关里的结果</td>\n<td></td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认</td>\n<td></td>\n</tr>\n<tr>\n<td>do</td>\n<td>运行</td>\n<td>长与while连用</td>\n</tr>\n<tr>\n<td>break</td>\n<td>跳出循环</td>\n<td></td>\n</tr>\n<tr>\n<td>continue</td>\n<td>继续</td>\n<td>中断本次循环，并开始下一次</td>\n</tr>\n<tr>\n<td>return</td>\n<td>返回</td>\n<td>return 一个返回值类型</td>\n</tr>\n<tr>\n<td>instanceof</td>\n<td>实例</td>\n<td>一个二元操作符，和==，&gt;，&lt;是同一类的。测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据</td>\n</tr>\n<tr>\n<td>static</td>\n<td>静态的</td>\n<td>属性和方法都可以用static修饰，直接使用类名.属性和方法名。 只有内部类可以使用static关键字修饰，调用直接使用类名.内部类类名进行调用。  static可以独立存在。静态块</td>\n</tr>\n<tr>\n<td>final</td>\n<td>最终的不可被改变的</td>\n<td>方法和类都可以用final来修饰  final修饰的类是不能被继承的  final修饰的方法是不能被子类重写。常量的定义：final修饰的属性就是常量。</td>\n</tr>\n<tr>\n<td>super</td>\n<td>调用父类的方法</td>\n<td>常见<code>public void paint(Graphics g)&#123;super.paint(g); ··· &#125;</code></td>\n</tr>\n<tr>\n<td>this</td>\n<td>当前类的父类的对象</td>\n<td>调用当前类中的方法（表示调用这个方法的对象）<code>this.addActionListener(al):</code>等等</td>\n</tr>\n<tr>\n<td>native</td>\n<td>本地</td>\n<td>用于表示一个方法是由本地代码（通常是由其他编程语言如C或C++编写的）实现的，使用本地方法可以在Java程序中调用底层操作系统或其他外部库中的功能。这在需要与底层系统交互或利用现有C/C++库的情况下很有用。</td>\n</tr>\n<tr>\n<td>strictfp</td>\n<td>严格,精准</td>\n<td></td>\n</tr>\n<tr>\n<td>synchronized</td>\n<td>线程,同步</td>\n<td>用于同步代码块</td>\n</tr>\n<tr>\n<td>transient</td>\n<td>短暂</td>\n<td>表明该变量在对象的序列化过程中应该被忽略，不会被持久化保存被 <code>transient</code> 修饰的变量不会被写入到输出流，因此在反序列化时也不会恢复该变量的值。</td>\n</tr>\n<tr>\n<td>volatile</td>\n<td>易失</td>\n<td>用于修饰变量以保证线程可见性</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>处理异常</td>\n<td>1.try+catch 程序的流程是：运行到try块中，如果有异常抛出，则转到catch块去处理。然后执行catch块后面的语句2.try+catch+finally<br/>程序的流程是：运行到try块中，如果有异常抛出，则转到catch块,catch块执行完毕后，执行finally块的代码，再执行finally块后面的代码。如果没有异常抛出，执行完try块，也要去执行finally块的代码。然后执行finally块后面的语句<br/><br/>3.try+finally<br/>程序的流程是：运行到try块中,如果有异常抛出的话，程序转向执行finally块的代码。那末finally块后面的代码还会被执行吗？不会！因为你没有处理异常，所以遇到异常后，执行完finally后，方法就已抛出异常的方式退出了。<br/>这种方式中要注意的是，由于你没有捕获异常，所以要在方法后面声明抛出异常<br/></td>\n</tr>\n<tr>\n<td>try</td>\n<td>捕获异常</td>\n<td></td>\n</tr>\n<tr>\n<td>finally</td>\n<td>有没有异常都执行</td>\n<td></td>\n</tr>\n<tr>\n<td>throw</td>\n<td>抛出一个异常对象</td>\n<td>一些可以导致程序出问题的因素,比如书写错误,逻辑错误或者是api的应用错误等等. 为了防止程序的崩溃就要预先检测这些因素,所以java 使用了异常这个机制.<br>在java中异常是靠 “抛出” 也就是英语的”throw” 来使用的,意思是如果发现到什么异常的时候就把错误信息 “抛出”</td>\n</tr>\n<tr>\n<td>throws</td>\n<td>声明一个异常可能被抛出</td>\n<td>用于指定该方法可能抛出的异常类型。当一个方法可能引发异常，但实际的异常处理将由调用该方法的代码处理</td>\n</tr>\n<tr>\n<td>enum</td>\n<td>枚举，列举型别</td>\n<td></td>\n</tr>\n<tr>\n<td>assert</td>\n<td>断言</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>true, false和null为小写,不能大写。严格地讲，它们不是关键字，而是一种值。但是仍然把它们作为关键字使用。<br>sizeof不是关键字<br>goto、const不是关键字，是保留字<br>关键字不能作为一般的标识符使用，即一般的标识符(变量名、类名、方法名等)不能与其同名。</p></blockquote>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>取名规则<ul>\n<li>必须由字母、下划线或美元符开头的</li>\n<li>并由字母、数字、下划线和美元符组成的</li>\n<li>不能与关键字同名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><p><img src=\"https://pic.imgdb.cn/item/64f48a54661c6c8e5417801a.png\" alt=\"\"></p>\n<h3 id=\"简单数据类型\"><a href=\"#简单数据类型\" class=\"headerlink\" title=\"简单数据类型\"></a>简单数据类型</h3><p><img src=\"https://pic.imgdb.cn/item/64f48a54661c6c8e54177fdc.png\" alt=\"\"></p>\n<p>Java语言数据中的数值类型都是有符号(正负号)的，在贮存数值类型的数据时，其最高位用来表示数据的正负号。简单类型的变量被声明时，存储空间也同时被分配。该贮存空间只占用一个单一贮存单元。对简单类型变量访问则直接可以得到它的数据。</p>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><p>引用类型(数组、class或interface)声明变量时，是不会为变量(即对象)分配存储空间。它们声明的变量不是数据本身，而是数据的引用(reference)，需用new运算符来为引用类型的变量分配贮存空间;<br>引用：类似C/C++中的指针，但又不同于C/C++中的指针，它的引用必须由Java的虚拟机创建和管理。<strong>Java语言本身不支持指针</strong>;<br>引用类型变量的值是一个数据的引用(即地址)。它是对占有由多个贮存单元构成的贮存空间的引用。引用类型的变量通过点””运算符访问它的成员。</p>\n<h2 id=\"常量与变量\"><a href=\"#常量与变量\" class=\"headerlink\" title=\"常量与变量\"></a>常量与变量</h2><h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>常量是指直接用于放入程序中的固定不变的值。它的表现形式有两种:数值和字符。</p>\n<ul>\n<li><p>整数型常量</p>\n<p>Java整数类型常量有三种形式:十进制、八进制、十六进制。</p>\n<p><strong>十进制整数</strong>是由不以0开头，0~9数字组成数据:12;</p>\n<p><strong>八进制整数</strong>是由以0开头，0~7数字组成的数据：012;</p>\n<p><strong>十六进制整数</strong>是由以0x或0X开头，0～9数字及A～F的字母组成的数据:0x12AB。</p>\n<p>整型数常量均为int类型，除非在其后有字母“L”来表示是长整型long的值。</p>\n</li>\n<li><p>浮点型常量</p>\n<p>浮点数类型有float单精度浮点数,double双精度浮点数。<strong>在数字后面带有字母F或f (float) 、D或d (double)分别表示单/双精度的浮点数值。</strong><br>在数值后面不带有任何大小写字母f或d时，表示为double数值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例如:如下形式表示的单/双精度型数值3.12E20 一个带指数的大浮点数值<br>1.567F                                                一个单精度浮点数值<br>42.314E+307D                                  一个带指数的双精度浮点数值。</p></blockquote>\n</li>\n<li><p>字符型常量</p>\n<p>由单引号”包括的单个Unicode字符例: ‘A’, 9’,’@’<br>16位无符号<br>在字符型常量中，也有用带””来表示的特殊字符，是其中的一些不可显示或有特殊意义的字符。<br>例:’\\n’, ‘\\t’</p>\n<p><img src=\"https://pic.imgdb.cn/item/64f48a54661c6c8e54177fe8.png\" alt=\"\"></p>\n</li>\n<li><p>布尔型常量</p>\n<p>布尔型关键字是boolean，它有两个常量false和true,以表示“假”和“真”两种状态。<strong>要注意的是在整型类型和boolean类型之间不能相互转换。</strong></p>\n</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量是语言编程中用来标识存储地址的名称，程序通过变量名访问所标识贮存空间的数据。变量必须显式地声明变量的类型。遵循“先声明、后使用”原则。</p>\n<h4 id=\"变量的分类及作用域\"><a href=\"#变量的分类及作用域\" class=\"headerlink\" title=\"变量的分类及作用域\"></a>变量的分类及作用域</h4><p>依变量创建所在处可分为：</p>\n<ul>\n<li>成员变量</li>\n<li>方法的变量(包含参数)</li>\n<li>语句块的变量</li>\n<li>异常处理的变量</li>\n</ul>\n<p>依变量作用域可分为：</p>\n<ul>\n<li><p>全局变量:成员变量</p>\n<ul>\n<li><p><strong>全局变量 (Global Variables):</strong></p>\n<p>在Java中，通常没有严格意义上的全局变量。Java中的成员变量（Instance Variables 和 Static Variables）是与类或对象关联的变量，它们在类级别声明，但在对象级别使用。</p>\n<ol>\n<li><strong>作用域（Scope）：</strong> 成员变量的作用域在整个类内，实例变量对于每个类的对象实例是独立的，而静态变量对于整个类是共享的。</li>\n<li><strong>生命周期：</strong> 成员变量的生命周期与类或对象的生命周期相关联。实例变量的生命周期与对象的生命周期相同，而静态变量的生命周期与类的生命周期相同。</li>\n<li><strong>可见性：</strong> 成员变量可以被类内的所有方法访问，它们对于整个类的代码都是可见的。实例变量对于每个对象的方法都是可见的，静态变量对于整个类的所有对象和方法都是可见的。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>局部变量:方法的变量(包含参数)</p>\n<ul>\n<li><strong>局部变量 (Local Variables):</strong><ol>\n<li><strong>作用域（Scope）：</strong> 局部变量的作用域仅限于声明它们的代码块、方法、或构造方法内部。它们只能在这些地方被访问和使用，超出这些范围就无法访问。</li>\n<li><strong>生命周期：</strong> 局部变量的生命周期仅限于包含它们的代码块的执行期间。一旦代码块执行完毕，局部变量就会被销毁，其内存被释放。</li>\n<li><strong>可见性：</strong> 局部变量通常用于保存临时数据或方法内部的中间结果。它们对于方法外的其他代码块是不可见的，因此具有良好的封装性。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/64f48a91661c6c8e54178a93.png\" alt=\"\"></p>\n<h3 id=\"运算符和表达式\"><a href=\"#运算符和表达式\" class=\"headerlink\" title=\"运算符和表达式\"></a>运算符和表达式</h3><h4 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h4><p><strong>单目(一元)运算符</strong>：有一个操作数</p>\n<pre><code>i++\n</code></pre><p><strong>双目(二元)运算符</strong>：有两个操作数</p>\n<pre><code>a + b\n</code></pre><p><strong>三目(三元)运算符</strong>：有三个操作数</p>\n<pre><code>x &gt; y ? a : b\n</code></pre><p><img src=\"https://pic.imgdb.cn/item/64f48a91661c6c8e54178ae0.png\" alt=\"\"></p>\n<p><strong>位运算符</strong></p>\n<p><img src=\"https://pic.imgdb.cn/item/64f48a91661c6c8e54178b01.png\" alt=\"\"></p>\n<p>e.g.</p>\n<p><strong>右移</strong>：</p>\n<p><img src=\"D:\\Documents\\Desktop\\WOW\\blog\\testBlog\\source\\_posts\\编程\\java\\java语言基础.assets\\image-20230901192801789.png\" alt=\"image-20230901192801789\"><br><strong>左移</strong>：执行一个左移位。移位的结果是第一个操作数乘以2的幂，而这个幂的指数就是第二个操作数。<br>左移位时，高位被截去，低位填充0。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64f48a91661c6c8e54178a79.png\" alt=\"\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>布尔运算符优化</strong></p>\n<p>&amp;&amp;运算符：opB18&amp;opB2<br>如果opB1值为false，则运算式的值就是false，无论opB2的值是什么。程序不会访问opB2;<br>如果opB1值为true，则需要opB2的值才能确定运算式的值，程序需要访问opB2。<br>||运算符：opB1||opB2<br>如果opB1值为true，则运算式的值就是true，无论opB2的值是什么。程序不会访问opB2;<br>如果opB1值为false，则需要opB2的值才能确定运算式的值，程序需要访问opB2。</p></blockquote>\n<h4 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h4><p>赋值运算符“=”的作用是将数据写入到变量的贮存单元中。在“=”运算符的左边是变量，右边则是待写入的数据值。<br>赋值操作必须注意:</p>\n<ul>\n<li><p>必须是将右边的数值赋给左边的变量</p>\n</li>\n<li><p>右边的数值类型要与左边的变量类型一致或相容</p>\n</li>\n<li><p>当它们的类型相同时，才能将右边的数值写入变量的贮存单元</p>\n<p><img src=\"https://pic.imgdb.cn/item/64f48a91661c6c8e54178ae0.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h4><p>“拓宽类型”是指把值范围小类型的数据转换成值范围大类型的数据；“缩窄类型”是指把值范围大类型的数据转换成值范围小类型的数据。</p>\n<ul>\n<li><p>自动转换：</p>\n<pre><code>int a = 10; long b = a;\n</code></pre></li>\n<li><p>强制转换：</p>\n<pre><code>long b = 10; int a = (int)b;\n</code></pre></li>\n</ul>\n<h4 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h4><pre><code>expreBool?expression1:expression2\n</code></pre><p><code>expreBool</code>表达式是<code>boolean</code>类型，<code>expression1</code>和<code>expression2</code>表达式是相同类型。当<code>expreBool</code>为<code>true</code>时，取<code>expression1</code>的值；当<code>expreBool</code>为<code>false</code>时，取<code>expression2</code>的值。</p>\n<h4 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h4><p>表达式是变量、常量、运算符、方法等按照一定的运算规则组成的序列，并返回一个值。表达式是运算符运算的表述，它返回值不仅与表达式中的操作数有关，而且还是运算符操作顺序有关。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>表达式有时也称为运算式。</p></blockquote>\n<p><img src=\"https://pic.imgdb.cn/item/64f48a91661c6c8e54178b01.png\" alt=\"\"></p>\n","text":"我超，java Java程序的基本结构Java语言的源程序是一个或多个以.java为扩展名的文件，Java源程序中可包含三个基本部分: 一个包声明package...","permalink":"/post/java语言基础","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"编程","slug":"编程","count":6,"path":"api/categories/编程.json"},{"name":"java","slug":"编程/java","count":6,"path":"api/categories/编程/java.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Java程序的基本结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">Java中的注释</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E5%AD%97%E7%AC%A6%E9%9B%86\"><span class=\"toc-text\">Java字符集</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%A6%E5%8F%B7%E9%9B%86\"><span class=\"toc-text\">符号集</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">标识符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Java数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">简单数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">引用数据类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">常量与变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">常量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%86%E7%B1%BB%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">变量的分类及作用域</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">运算符和表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">类型转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">三目运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">表达式</span></a></li></ol></li></ol></li></ol>","author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"java流程控制和数组","uid":"af5b7b140c3f656ff60a269d72084da5","slug":"java流程控制和数组","date":"2023-09-01T12:49:52.000Z","updated":"2023-09-07T09:51:04.538Z","comments":true,"path":"api/articles/java流程控制和数组.json","keywords":null,"cover":[],"text":"Java语言中的流程控制语句提供了控制程序执行顺序的手段。流程控制是程序代码的重要部分。流程控制语句分为：分支语句、循环语句、异常处理语句和跳转语句。 分支语句...","permalink":"/post/java流程控制和数组","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":6,"path":"api/categories/编程.json"},{"name":"java","slug":"编程/java","count":6,"path":"api/categories/编程/java.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"}],"author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"java概述","uid":"ac1892c7e69c5d72eb21bb4d76af07c9","slug":"java概述","date":"2023-08-31T10:07:29.000Z","updated":"2023-09-07T09:51:06.822Z","comments":true,"path":"api/articles/java概述.json","keywords":null,"cover":[],"text":"JAVA Java 技术的多功能性、有效性、平台的可移植性以及安全性已经使它成为网络计算领域最完美的技术。 JAVA语言特点平台无关性 编译器所生成的可执行代码...","permalink":"/post/java概述","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":6,"path":"api/categories/编程.json"},{"name":"java","slug":"编程/java","count":6,"path":"api/categories/编程/java.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"}],"author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}