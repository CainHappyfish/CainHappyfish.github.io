{"title":"php-Basic","uid":"49195eb2df2edd82dc60ba6a843fc68d","slug":"php","date":"2023-08-02T01:18:49.000Z","updated":"2023-09-17T13:07:47.008Z","comments":true,"path":"api/articles/php.json","keywords":null,"cover":null,"content":"<h1 id=\"PHP编程\"><a href=\"#PHP编程\" class=\"headerlink\" title=\"PHP编程\"></a>PHP编程</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><del>php是世界上最好的编程语言！</del></p></blockquote>\n<p>PHP 是服务器端脚本语言。</p>\n<ul>\n<li>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</li>\n<li>PHP 脚本在服务器上执行。</li>\n<li><p>PHP 可免费下载使用。</p>\n</li>\n<li><p>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</p>\n</li>\n<li>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</li>\n<li><p>PHP 文件的默认文件扩展名是 “.php”</p>\n</li>\n<li><p>PHP 可以生成动态页面内容</p>\n</li>\n<li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li>\n<li>PHP 可以收集表单数据</li>\n<li>PHP 可以发送和接收 cookies</li>\n<li>PHP 可以添加、删除、修改您的数据库中的数据</li>\n<li>PHP 可以限制用户访问您的网站上的一些页面</li>\n<li>PHP 可以加密数据</li>\n</ul>\n<p>通过 PHP，您不再限于输出 HTML。您可以输出图像、PDF 文件，甚至 Flash 电影。您还可以输出任意的文本，比如 XHTML 和 XML。</p>\n<span id=\"more\"></span>\n<h2 id=\"PHP语法\"><a href=\"#PHP语法\" class=\"headerlink\" title=\"PHP语法\"></a>PHP语法</h2><p>PHP 脚本可以放在文档中的任何位置。</p>\n<p>PHP 脚本以 <strong>\\&lt;?php</strong>  开始，以 <strong>?></strong>  结束：</p>\n<pre><code class=\"lang-php\">&lt;?php\n// PHP 代码\n?&gt;\n</code></pre>\n<p>PHP 文件的默认文件扩展名是 “.php”。</p>\n<p>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。</p>\n<p>一个简单的例子：</p>\n<pre><code class=\"lang-php+HTML\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My first PHP page&lt;/h1&gt;\n\n&lt;?php\necho &quot;Hello World!&quot;;\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"PHP变量\"><a href=\"#PHP变量\" class=\"headerlink\" title=\"PHP变量\"></a>PHP变量</h2><pre><code class=\"lang-php+HTML\">&lt;?php\n\n$x=5;\n$y=6;\n$z=$x+$y;\necho &quot;x + y = $z&quot;\n\n?&gt;\n</code></pre>\n<p>与代数类似，可以给 PHP 变量赋予某个值（<code>x=5</code>）或者表达式（<code>z=x+y</code>）。</p>\n<p>PHP 变量规则：</p>\n<ul>\n<li>变量以 $ 符号开始，后面跟着变量的名称</li>\n<li>变量名必须以字母或者下划线字符开始</li>\n<li>变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ）</li>\n<li>变量名不能包含空格</li>\n<li>变量名是区分大小写的（<code>$y</code> 和<code>$Y</code>是两个不同的变量）</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PHP 语句和 PHP 变量都是区分大小写的。</p></blockquote>\n<h2 id=\"PHP-变量作用域\"><a href=\"#PHP-变量作用域\" class=\"headerlink\" title=\"PHP 变量作用域\"></a>PHP 变量作用域</h2><p>变量的作用域是脚本中变量可被引用/使用的部分。</p>\n<p>PHP 有四种不同的变量作用域：</p>\n<ul>\n<li>local</li>\n<li>global</li>\n<li>static</li>\n<li>parameter</li>\n</ul>\n<h2 id=\"PHP-echo-和-print-语句\"><a href=\"#PHP-echo-和-print-语句\" class=\"headerlink\" title=\"PHP echo 和 print 语句\"></a>PHP echo 和 print 语句</h2><p><code>echo</code>和 <code>print</code>区别:</p>\n<ul>\n<li><code>echo</code> - 可以输出一个或多个字符串，是一个语言结构，使用的时候可以不用加括号，也可以加上括号： <code>echo</code> 或 <code>echo()</code>。</li>\n<li><code>print</code> - 只允许输出一个字符串，返回值总为 1，同样是一个语言结构，可以使用括号，也可以不使用括号：<code>print</code> 或 <code>print()</code>。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p></blockquote>\n<p>使用 <code>echo, print</code> 命令输出字符串可以包含 HTML 标签。</p>\n<h2 id=\"PHP-EOF-heredoc-使用说明\"><a href=\"#PHP-EOF-heredoc-使用说明\" class=\"headerlink\" title=\"PHP EOF(heredoc) 使用说明\"></a>PHP EOF(heredoc) 使用说明</h2><p>PHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字符串的方法。</p>\n<p>使用概述：</p>\n<ul>\n<li>必须后接分号，否则编译通不过。</li>\n<li><strong>EOF</strong> 可以用任意其它字符代替，只需保证结束标识与开始标识一致。</li>\n<li><strong>结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。</strong></li>\n<li>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。</li>\n<li>当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，<strong>本身对单双引号转义</strong>，此处相当与q和qq的用法。</li>\n</ul>\n<pre><code>&lt;?php\n$name=&quot;C4IN&quot;;\n$a=&lt;&lt;&lt;EOF\n        name: &quot;$name&quot;\n         , hello\n    EOF;\necho $a\n?&gt;\n</code></pre><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意：</strong></p>\n<p>1.以<code>&lt;&lt;&lt;EOF</code> 开始标记开始，以 <code>EOF</code> 结束标记结束，结束标记必须顶头写，不能有缩进和空格，且在结束标记末尾要有分号 。</p>\n<p>2.开始标记和结束标记相同，比如常用大写的 <strong>EOT、EOD、EOF</strong> 来表示，但是不只限于那几个(也可以用：JSON、HTML等)，只要保证开始标记和结束标记不在正文中出现即可。</p>\n<p>3.位于开始标记和结束标记之间的变量可以被正常解析，但是函数则不可以。在 heredoc 中，变量不需要用连接符 <strong>.</strong> 或 <strong>,</strong> 来拼接。</p></blockquote>\n<h1 id=\"PHP-数据类型\"><a href=\"#PHP-数据类型\" class=\"headerlink\" title=\"PHP 数据类型\"></a>PHP 数据类型</h1><p>PHP 变量存储不同的类型的数据，不同的数据类型可以做不一样的事情。</p>\n<p>PHP 支持以下几种数据类型:</p>\n<ul>\n<li>String（字符串）</li>\n<li>Integer（整型）</li>\n<li>Float（浮点型）</li>\n<li>Boolean（布尔型）</li>\n<li>Array（数组）</li>\n<li>Object（对象）</li>\n<li>NULL（空值）</li>\n<li>Resource（资源类型）</li>\n</ul>\n<h3 id=\"PHP-资源类型\"><a href=\"#PHP-资源类型\" class=\"headerlink\" title=\"PHP 资源类型\"></a>PHP 资源类型</h3><p>PHP 资源 resource 是一种特殊变量，保存了到外部资源的一个引用。</p>\n<p>常见资源数据类型有打开文件、数据库连接、图形画布区域等。</p>\n<p>由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。</p>\n<p>使用 <code>get_resource_type()</code> 函数可以返回资源（resource）类型：</p>\n<pre><code>get_resource_type(resource $handle): string\n</code></pre><p>此函数返回一个字符串，用于表示传递给它的 resource 的类型。如果参数不是合法的 resource，将产生错误。</p>\n<pre><code>&lt;?php\n$c = mysql_connect();\necho get_resource_type($c).&quot;\\n&quot;;\n// 打印：mysql link\n\n$fp = fopen(&quot;foo&quot;,&quot;w&quot;);\necho get_resource_type($fp).&quot;\\n&quot;;\n// 打印：file\n\n$doc = new_xmldoc(&quot;1.0&quot;);\necho get_resource_type($doc-&gt;doc).&quot;\\n&quot;;\n// 打印：domxml document\n?&gt;\n</code></pre><h1 id=\"PHP-类型比较\"><a href=\"#PHP-类型比较\" class=\"headerlink\" title=\"PHP 类型比较\"></a>PHP 类型比较</h1><p>虽然 PHP 是弱类型语言，但也需要明白变量类型及它们的意义，因为我们经常需要对 PHP 变量进行比较，包含松散和严格比较。</p>\n<ul>\n<li>松散比较：使用两个等号 <strong>==</strong> 比较，只比较值，不比较类型。</li>\n<li>严格比较：用三个等号 <strong>===</strong> 比较，除了比较值，也比较类型。</li>\n</ul>\n<h2 id=\"PHP-常量\"><a href=\"#PHP-常量\" class=\"headerlink\" title=\"PHP 常量\"></a>PHP 常量</h2><p>常量是一个简单值的标识符。该值在脚本中不能改变。</p>\n<p>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。</p>\n<p><strong>注意：</strong> 常量在整个脚本中都可以使用。</p>\n<h3 id=\"设置-PHP-常量\"><a href=\"#设置-PHP-常量\" class=\"headerlink\" title=\"设置 PHP 常量\"></a>设置 PHP 常量</h3><p>设置常量，使用<code>define()</code>函数，函数语法如下：</p>\n<pre><code>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )\n</code></pre><p>该函数有三个参数:</p>\n<ul>\n<li><p><strong>name：</strong> 必选参数，常量名称，即标志符。</p>\n</li>\n<li><p><strong>value：</strong> 必选参数，常量的值。</p>\n</li>\n<li><p><strong>case_insensitive</strong>  ：可选参数，如果设置为 TRUE，该常量则大小写不敏感，默认是大小写敏感的。</p>\n<p><strong>注意：</strong>自 PHP 7.3.0 开始，定义不区分大小写的常量已被弃用。从 PHP 8.0.0 开始，只有 false 是可接受的值，传递 true 将产生一个警告。</p>\n</li>\n</ul>\n<pre><code>&lt;?php\ndefine(&#39;NAME&#39;,&#39;C4IN&#39;);\necho NAME;\necho C4IN;   // 输出，但会报常量未定义\n?&gt;\n</code></pre><h2 id=\"PHP字符串\"><a href=\"#PHP字符串\" class=\"headerlink\" title=\"PHP字符串\"></a>PHP字符串</h2><h3 id=\"PHP-并置运算符\"><a href=\"#PHP-并置运算符\" class=\"headerlink\" title=\"PHP 并置运算符\"></a>PHP 并置运算符</h3><p>在 PHP 中，只有一个字符串运算符。</p>\n<p>并置运算符 (.) 用于把两个字符串值连接起来。</p>\n<p>下面的实例演示了如何将两个字符串变量连接在一起：</p>\n<pre><code>&lt;?php\n$str1=&#39;name:&#39;;\n$str2=&#39;C4IN&#39;;\n$str3=$str1.&#39; &#39;.$str2;\necho $str3;\n?&gt;\n</code></pre><h3 id=\"PHP-strlen\"><a href=\"#PHP-strlen\" class=\"headerlink\" title=\"PHP strlen()\"></a>PHP <code>strlen()</code></h3><p><code>strlen()</code>函数返回字符串的长度（字节数）。</p>\n<h3 id=\"PHP-strpos\"><a href=\"#PHP-strpos\" class=\"headerlink\" title=\"PHP strpos()\"></a>PHP <code>strpos()</code></h3><p>strpos() 函数用于在字符串内查找一个字符或一段指定的文本。</p>\n<p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。</p>\n<pre><code>&lt;?php\necho strpos(&quot;Hello world!&quot;,&quot;world&quot;);\n?&gt;\n</code></pre><h2 id=\"PHP运算符\"><a href=\"#PHP运算符\" class=\"headerlink\" title=\"PHP运算符\"></a>PHP运算符</h2><h3 id=\"PHP-算术运算符\"><a href=\"#PHP-算术运算符\" class=\"headerlink\" title=\"PHP 算术运算符\"></a>PHP 算术运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n<th style=\"text-align:left\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">x + y</td>\n<td style=\"text-align:left\">加</td>\n<td style=\"text-align:left\">x 和 y 的和</td>\n<td style=\"text-align:left\">2 + 2</td>\n<td style=\"text-align:left\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x - y</td>\n<td style=\"text-align:left\">减</td>\n<td style=\"text-align:left\">x 和 y 的差</td>\n<td style=\"text-align:left\">5 - 2</td>\n<td style=\"text-align:left\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x * y</td>\n<td style=\"text-align:left\">乘</td>\n<td style=\"text-align:left\">x 和 y 的积</td>\n<td style=\"text-align:left\">5 * 2</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x / y</td>\n<td style=\"text-align:left\">除</td>\n<td style=\"text-align:left\">x 和 y 的商</td>\n<td style=\"text-align:left\">15 / 5</td>\n<td style=\"text-align:left\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x % y</td>\n<td style=\"text-align:left\">模（除法的余数）</td>\n<td style=\"text-align:left\">x 除以 y 的余数</td>\n<td style=\"text-align:left\">5 % 2 10 % 8 10 % 2</td>\n<td style=\"text-align:left\">1 2 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-x</td>\n<td style=\"text-align:left\">设置负数</td>\n<td style=\"text-align:left\">取 x 的相反符号</td>\n<td style=\"text-align:left\"><code>&lt;?php $x = 2; echo -$x; ?&gt;</code></td>\n<td style=\"text-align:left\">-2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~x</td>\n<td style=\"text-align:left\">取反</td>\n<td style=\"text-align:left\">x 取反，按二进制位进行”取反”运算。运算规则：<code>~1=-2;    ~0=-1;</code></td>\n<td style=\"text-align:left\"><code>&lt;?php $x = 2; echo ~$x; ?&gt;</code></td>\n<td style=\"text-align:left\">-3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a . b</td>\n<td style=\"text-align:left\">并置</td>\n<td style=\"text-align:left\">连接两个字符串</td>\n<td style=\"text-align:left\">“Hi” . “Ha”</td>\n<td style=\"text-align:left\">HiHa</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>PHP7+ 版本新增整除运算符 <code>intdiv()</code>，该函数返回值为第一个参数除于第二个参数的值并取整（向下取整）。</p>\n<pre><code>&lt;?php\nvar_dump(intdiv(10, 3));\n?&gt;\n</code></pre><pre><code>int(3)\n</code></pre></blockquote>\n<h3 id=\"PHP-赋值运算符\"><a href=\"#PHP-赋值运算符\" class=\"headerlink\" title=\"PHP 赋值运算符\"></a>PHP 赋值运算符</h3><p>在 PHP 中，基本的赋值运算符是 <strong>=</strong>。它意味着左操作数被设置为右侧表达式的值。也就是说，<strong>$x = 5</strong> 的值是 5。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">等同于</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">x = y</td>\n<td style=\"text-align:left\">x = y</td>\n<td style=\"text-align:left\">左操作数被设置为右侧表达式的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x += y</td>\n<td style=\"text-align:left\">x = x + y</td>\n<td style=\"text-align:left\">加</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x -= y</td>\n<td style=\"text-align:left\">x = x - y</td>\n<td style=\"text-align:left\">减</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x *= y</td>\n<td style=\"text-align:left\">x = x * y</td>\n<td style=\"text-align:left\">乘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x /= y</td>\n<td style=\"text-align:left\">x = x / y</td>\n<td style=\"text-align:left\">除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x %= y</td>\n<td style=\"text-align:left\">x = x % y</td>\n<td style=\"text-align:left\">模（除法的余数）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a .= b</td>\n<td style=\"text-align:left\">a = a . b</td>\n<td style=\"text-align:left\">连接两个字符串</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"PHP-递增-递减运算符\"><a href=\"#PHP-递增-递减运算符\" class=\"headerlink\" title=\"PHP 递增/递减运算符\"></a>PHP 递增/递减运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">++ x</td>\n<td style=\"text-align:left\">预递增</td>\n<td style=\"text-align:left\">x 加 1，然后返回 x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x ++</td>\n<td style=\"text-align:left\">后递增</td>\n<td style=\"text-align:left\">返回 x，然后 x 加 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">— x</td>\n<td style=\"text-align:left\">预递减</td>\n<td style=\"text-align:left\">x 减 1，然后返回 x</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x —</td>\n<td style=\"text-align:left\">后递减</td>\n<td style=\"text-align:left\">返回 x，然后 x 减 1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"PHP-比较运算符\"><a href=\"#PHP-比较运算符\" class=\"headerlink\" title=\"PHP 比较运算符\"></a>PHP 比较运算符</h3><p>比较操作符可以让您比较两个值：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">x == y</td>\n<td style=\"text-align:left\">等于</td>\n<td style=\"text-align:left\">如果 x 等于 y，则返回 true</td>\n<td style=\"text-align:left\">5==8 返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x === y</td>\n<td style=\"text-align:left\">绝对等于</td>\n<td style=\"text-align:left\">如果 x 等于 y，<strong>且它们类型相同</strong>，则返回 true</td>\n<td style=\"text-align:left\">5===”5” 返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x != y</td>\n<td style=\"text-align:left\">不等于</td>\n<td style=\"text-align:left\">如果 x 不等于 y，则返回 true</td>\n<td style=\"text-align:left\">5!=8 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x &lt;&gt; y</td>\n<td style=\"text-align:left\">不等于</td>\n<td style=\"text-align:left\">如果 x 不等于 y，则返回 true</td>\n<td style=\"text-align:left\">5&lt;&gt;8 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x !== y</td>\n<td style=\"text-align:left\">不绝对等于</td>\n<td style=\"text-align:left\">如果 x 不等于 y，或它们类型不相同，则返回 true</td>\n<td style=\"text-align:left\">5!==”5” 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x &gt; y</td>\n<td style=\"text-align:left\">大于</td>\n<td style=\"text-align:left\">如果 x 大于 y，则返回 true</td>\n<td style=\"text-align:left\">5&gt;8 返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x &lt; y</td>\n<td style=\"text-align:left\">小于</td>\n<td style=\"text-align:left\">如果 x 小于 y，则返回 true</td>\n<td style=\"text-align:left\">5&lt;8 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x &gt;= y</td>\n<td style=\"text-align:left\">大于等于</td>\n<td style=\"text-align:left\">如果 x 大于或者等于 y，则返回 true</td>\n<td style=\"text-align:left\">5&gt;=8 返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x &lt;= y</td>\n<td style=\"text-align:left\">小于等于</td>\n<td style=\"text-align:left\">如果 x 小于或者等于 y，则返回 true</td>\n<td style=\"text-align:left\">5&lt;=8 返回 true</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"PHP-逻辑运算符\"><a href=\"#PHP-逻辑运算符\" class=\"headerlink\" title=\"PHP 逻辑运算符\"></a>PHP 逻辑运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">x and y</td>\n<td style=\"text-align:left\">与</td>\n<td style=\"text-align:left\">如果 x 和 y 都为 true，则返回 true</td>\n<td style=\"text-align:left\">x=6 y=3 (x &lt; 10 and y &gt; 1) 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x or y</td>\n<td style=\"text-align:left\">或</td>\n<td style=\"text-align:left\">如果 x 和 y 至少有一个为 true，则返回 true</td>\n<td style=\"text-align:left\">x=6 y=3 (x\\==6 or y\\==5) 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x xor y</td>\n<td style=\"text-align:left\">异或</td>\n<td style=\"text-align:left\">如果 x 和 y 有且仅有一个为 true，则返回 true</td>\n<td style=\"text-align:left\">x=6 y=3 (x\\==6 xor y==3) 返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x &amp;&amp; y</td>\n<td style=\"text-align:left\">与</td>\n<td style=\"text-align:left\">如果 x 和 y 都为 true，则返回 true</td>\n<td style=\"text-align:left\">x=6 y=3 (x &lt; 10 &amp;&amp; y &gt; 1) 返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x \\</td>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">y</td>\n<td style=\"text-align:left\">或</td>\n<td>如果 x 和 y 至少有一个为 true，则返回 true</td>\n<td>x=6 y=3 (x\\==5 \\</td>\n<td>\\</td>\n<td>y==5) 返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">!x</td>\n<td style=\"text-align:left\">非</td>\n<td style=\"text-align:left\">如果 x 不为 true，则返回 true</td>\n<td style=\"text-align:left\">x=6 y=3, !(x==y) 返回 true</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"PHP-数组运算符\"><a href=\"#PHP-数组运算符\" class=\"headerlink\" title=\"PHP 数组运算符\"></a>PHP 数组运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">x + y</td>\n<td style=\"text-align:left\">集合</td>\n<td style=\"text-align:left\">x 和 y 的集合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x == y</td>\n<td style=\"text-align:left\">相等</td>\n<td style=\"text-align:left\">如果 x 和 y 具有相同的键/值对，则返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x === y</td>\n<td style=\"text-align:left\">恒等</td>\n<td style=\"text-align:left\">如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x != y</td>\n<td style=\"text-align:left\">不相等</td>\n<td style=\"text-align:left\">如果 x 不等于 y，则返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x &lt;&gt; y</td>\n<td style=\"text-align:left\">不相等</td>\n<td style=\"text-align:left\">如果 x 不等于 y，则返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x !== y</td>\n<td style=\"text-align:left\">不恒等</td>\n<td style=\"text-align:left\">如果 x 不等于 y，则返回 true</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"PHP-条件语句\"><a href=\"#PHP-条件语句\" class=\"headerlink\" title=\"PHP 条件语句\"></a>PHP 条件语句</h2><p>在 PHP 中，提供了下列条件语句：</p>\n<ul>\n<li><strong>if 语句</strong> - 在条件成立时执行代码</li>\n<li><strong>if…else 语句</strong> - 在条件成立时执行一块代码，条件不成立时执行另一块代码</li>\n<li><strong>if…elseif….else 语句</strong> - 在若干条件之一成立时执行一个代码块</li>\n<li><strong>switch 语句</strong> - 在若干条件之一成立时执行一个代码块</li>\n</ul>\n<h2 id=\"PHP数组\"><a href=\"#PHP数组\" class=\"headerlink\" title=\"PHP数组\"></a>PHP数组</h2><h3 id=\"在-PHP-中创建数组\"><a href=\"#在-PHP-中创建数组\" class=\"headerlink\" title=\"在 PHP 中创建数组\"></a>在 PHP 中创建数组</h3><p>在 PHP 中，<code>array()</code>函数用于创建数组：</p>\n<pre><code>array();\n</code></pre><p>在 PHP 中，有三种类型的数组：</p>\n<ul>\n<li><strong>数值数组</strong> - 带有数字 ID 键的数组</li>\n<li><strong>关联数组</strong> - 带有指定的键的数组，每个键关联一个值</li>\n<li><strong>多维数组</strong> - 包含一个或多个数组的数组</li>\n</ul>\n<h3 id=\"PHP-数值数组\"><a href=\"#PHP-数值数组\" class=\"headerlink\" title=\"PHP 数值数组\"></a>PHP 数值数组</h3><p>这里有两种创建数值数组的方法：</p>\n<p>自动分配 ID 键（ID 键总是从 0 开始）：</p>\n<pre><code>$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\n</code></pre><p>人工分配 ID 键：</p>\n<pre><code>$cars[0]=&quot;Volvo&quot;;\n$cars[1]=&quot;BMW&quot;;\n$cars[2]=&quot;Toyota&quot;;\n</code></pre><pre><code>&lt;?php\n$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);\necho &quot;I like &quot; . $cars[0] . &quot;, &quot; . $cars[1] . &quot; and &quot; . $cars[2] . &quot;.&quot;;\n?&gt;\n</code></pre><h3 id=\"count-函数\"><a href=\"#count-函数\" class=\"headerlink\" title=\"count()函数\"></a><code>count()</code>函数</h3><p><code>count()</code>函数用于返回数组的长度（元素的数量）。</p>\n<h3 id=\"PHP-关联数组\"><a href=\"#PHP-关联数组\" class=\"headerlink\" title=\"PHP 关联数组\"></a>PHP 关联数组</h3><p>关联数组是使用分配给数组的指定的键的数组。</p>\n<p>这里有两种创建关联数组的方法：</p>\n<pre><code>$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);\n</code></pre><p>or:</p>\n<pre><code>$age[&#39;Peter&#39;]=&quot;35&quot;;\n$age[&#39;Ben&#39;]=&quot;37&quot;;\n$age[&#39;Joe&#39;]=&quot;43&quot;;\n</code></pre><p>随后可以在脚本中使用指定的键：</p>\n<pre><code>&lt;?php\n$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);\necho &quot;Peter is &quot; . $age[&#39;Peter&#39;] . &quot; years old.&quot;;\n?&gt;\n</code></pre><h4 id=\"遍历关联数组\"><a href=\"#遍历关联数组\" class=\"headerlink\" title=\"遍历关联数组\"></a>遍历关联数组</h4><p>遍历并打印关联数组中的所有值，可以使用 foreach 循环，如下所示：</p>\n<pre><code>&lt;?php\n$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);\n\nforeach($age as $x=&gt;$x_value)\n&#123;\n    echo &quot;Key=&quot; . $x . &quot;, Value=&quot; . $x_value;\n    echo &quot;&lt;br&gt;&quot;;\n&#125;\n?&gt;\n</code></pre><h2 id=\"PHP-数组排序函数·\"><a href=\"#PHP-数组排序函数·\" class=\"headerlink\" title=\"PHP - 数组排序函数·\"></a>PHP - 数组排序函数·</h2><ul>\n<li><code>sort()</code>- 对数组进行升序排列</li>\n<li><code>rsort()</code> - 对数组进行降序排列</li>\n<li><code>asort()</code>- 根据关联数组的值，对数组进行升序排列</li>\n<li><code>ksort()</code>- 根据关联数组的键，对数组进行升序排列</li>\n<li><code>arsort()</code>- 根据关联数组的值，对数组进行降序排列</li>\n<li><code>krsort()</code>- 根据关联数组的键，对数组进行降序排列</li>\n</ul>\n<h2 id=\"PHP-超级全局变量\"><a href=\"#PHP-超级全局变量\" class=\"headerlink\" title=\"PHP 超级全局变量\"></a>PHP 超级全局变量</h2><p>PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。</p>\n<p>PHP 超级全局变量列表:</p>\n<ul>\n<li><p><code>$GLOBALS</code></p>\n<pre><code>&lt;?php \n$x = 75; \n$y = 25;\n\nfunction addition() \n&#123; \n    $GLOBALS[&#39;z&#39;] = $GLOBALS[&#39;x&#39;] + $GLOBALS[&#39;y&#39;]; \n&#125;\n\naddition(); \necho $z; \n?&gt;\n</code></pre><p>z 是一个<code>$GLOBALS</code>数组中的超级全局变量，该变量同样可以在函数外访问。</p>\n</li>\n<li><p><code>$_SERVER</code></p>\n<p><code>$_SERVER</code> 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目<strong>由 Web 服务器创建</strong>。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p>\n<p>以下实例中展示了如何使用<code>$_SERVER</code>中的元素：</p>\n<pre><code>&lt;?php \necho $_SERVER[&#39;PHP_SELF&#39;];\necho &quot;&lt;br&gt;&quot;;\necho $_SERVER[&#39;SERVER_NAME&#39;];\necho &quot;&lt;br&gt;&quot;;\necho $_SERVER[&#39;HTTP_HOST&#39;];\necho &quot;&lt;br&gt;&quot;;\necho $_SERVER[&#39;HTTP_REFERER&#39;];\necho &quot;&lt;br&gt;&quot;;\necho $_SERVER[&#39;HTTP_USER_AGENT&#39;];\necho &quot;&lt;br&gt;&quot;;\necho $_SERVER[&#39;SCRIPT_NAME&#39;];\n?&gt;\n</code></pre><p>| 元素/代码                       | 描述                                                         |<br>| :——————————————— | :—————————————————————————————- |<br>| $_SERVER[‘PHP_SELF’]            | 当前执行脚本的文件名，与 document root 有关。例如，在地址为 <a href=\"http://example.com/test.php/foo.bar\">http://example.com/test.php/foo.bar</a> 的脚本中使用 $_SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar。<strong>FILE</strong> 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。 |<br>| $_SERVER[‘GATEWAY_INTERFACE’]   | 服务器使用的 CGI 规范的版本；例如，”CGI/1.1”。               |<br>| $_SERVER[‘SERVER_ADDR’]         | 当前运行脚本所在的服务器的 IP 地址。                         |<br>| $_SERVER[‘SERVER_NAME’]         | 当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。(如: www.runoob.com) |<br>| $_SERVER[‘SERVER_SOFTWARE’]     | 服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache/2.2.24) |<br>| $_SERVER[‘SERVER_PROTOCOL’]     | 请求页面时通信协议的名称和版本。例如，”HTTP/1.0”。           |<br>| $_SERVER[‘REQUEST_METHOD’]      | 访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。 |<br>| $_SERVER[‘REQUEST_TIME’]        | 请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496)   |<br>| $_SERVER[‘QUERY_STRING’]        | query string（查询字符串），如果有的话，通过它进行页面访问。 |<br>| $_SERVER[‘HTTP_ACCEPT’]         | 当前请求头中 Accept: 项的内容，如果存在的话。                |<br>| $_SERVER[‘HTTP_ACCEPT_CHARSET’] | 当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：”iso-8859-1,*,utf-8”。 |<br>| $_SERVER[‘HTTP_HOST’]           | 当前请求头中 Host: 项的内容，如果存在的话。                  |<br>| $_SERVER[‘HTTP_REFERER’]        | 引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。) |<br>| $_SERVER[‘HTTPS’]               | 如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。      |<br>| $_SERVER[‘REMOTE_ADDR’]         | 浏览当前页面的用户的 IP 地址。                               |<br>| $_SERVER[‘REMOTE_HOST’]         | 浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。 |<br>| $_SERVER[‘REMOTE_PORT’]         | 用户机器上连接到 Web 服务器所使用的端口号。                  |<br>| $_SERVER[‘SCRIPT_FILENAME’]     | 当前执行脚本的绝对路径。                                     |<br>| $_SERVER[‘SERVER_ADMIN’]        | 该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：someone@runoob.com) |<br>| $_SERVER[‘SERVER_PORT’]         | Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。 |<br>| $_SERVER[‘SERVER_SIGNATURE’]    | 包含了服务器版本和虚拟主机名的字符串。                       |<br>| $_SERVER[‘PATH_TRANSLATED’]     | 当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。 |<br>| $_SERVER[‘SCRIPT_NAME’]         | 包含当前脚本的路径。这在页面需要指向自己时非常有用。<strong>FILE</strong> 常量包含当前脚本(例如包含文件)的完整路径和文件名。 |<br>| $_SERVER[‘SCRIPT_URI’]          | URI 用来指定要访问的页面。例如 “/index.html”。               |</p>\n</li>\n<li><p><code>$_REQUEST</code></p>\n<p> <code>$_REQUEST</code>用于收集HTML表单提交的数据。</p>\n<p>以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<code>&lt;form&gt;</code>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_REQUEST 来收集表单中的 input 字段数据：</p>\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n\n&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;\nName: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;\n&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php \n$name = $_REQUEST[&#39;fname&#39;]; \necho $name; \n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li>\n<li><p><code>$_POST</code></p>\n<p> <code>$_POST</code>被广泛应用于收集表单数据，在HTML form标签的指定该属性：<code>&quot;method=&quot;post&quot;</code>。</p>\n<p>以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<code>&lt;form&gt;</code>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_POST 来收集表单中的 input 字段数据：</p>\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n\n&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;\nName: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;\n&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php \n$name = $_POST[&#39;fname&#39;]; \necho $name; \n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li>\n<li><p><code>$_GET</code></p>\n<p><code>$_GET</code>同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：<code>&quot;method=&quot;get&quot;</code>。</p>\n<p>$_GET 也可以收集URL中发送的数据。</p>\n<p>假定我们有一个包含参数的超链接HTML页面：</p>\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n\n&lt;a href=&quot;test_get.php?subject=PHP&amp;web=runoob.com&quot;&gt;Test $GET&lt;/a&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>当用户点击链接 “Test $GET”, 参数 “subject” 和 “web” 将发送至”test_get.php”,你可以在 “test_get.php” 文件中使用 $_GET 变量来获取这些数据。</p>\n</li>\n<li><p><code>$_FILES</code></p>\n</li>\n<li><p><code>$_ENV</code></p>\n</li>\n<li><p><code>$_COOKIE</code></p>\n</li>\n<li><p><code>$_SESSION</code></p>\n</li>\n</ul>\n<h2 id=\"PHP-函数\"><a href=\"#PHP-函数\" class=\"headerlink\" title=\"PHP 函数\"></a>PHP 函数</h2><h3 id=\"创建-PHP-函数\"><a href=\"#创建-PHP-函数\" class=\"headerlink\" title=\"创建 PHP 函数\"></a>创建 PHP 函数</h3><p>函数是通过调用函数来执行的。</p>\n<pre><code>&lt;?php\nfunction functionName()\n&#123;\n    // 要执行的代码\n&#125;\n?&gt;\n</code></pre><p>PHP 函数准则：</p>\n<ul>\n<li>函数的名称应该提示出它的功能</li>\n<li>函数名称以字母或下划线开头（不能以数字开头）</li>\n</ul>\n<h3 id=\"添加参数\"><a href=\"#添加参数\" class=\"headerlink\" title=\"添加参数\"></a>添加参数</h3><p>为了给函数添加更多的功能，我们可以添加参数，参数类似变量。</p>\n<p>参数就在函数名称后面的一个括号内指定。</p>\n<pre><code>&lt;?php\nfunction writeName($fname)\n&#123;\n    echo $fname . &quot; Refsnes.&lt;br&gt;&quot;;\n&#125;\n\necho &quot;My name is &quot;;\nwriteName(&quot;Kai Jim&quot;);\necho &quot;My sister&#39;s name is &quot;;\nwriteName(&quot;Hege&quot;);\necho &quot;My brother&#39;s name is &quot;;\nwriteName(&quot;Stale&quot;);\n?&gt;\n</code></pre><h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>使用 return 语句。</p>\n<pre><code>&lt;?php\nfunction add($x,$y)\n&#123;\n    $total=$x+$y;\n    return $total;\n&#125;\n\necho &quot;1 + 16 = &quot; . add(1,16);\n?&gt;\n</code></pre><h2 id=\"PHP-魔术常量\"><a href=\"#PHP-魔术常量\" class=\"headerlink\" title=\"PHP 魔术常量\"></a>PHP 魔术常量</h2><p>PHP 向它运行的任何脚本提供了大量的预定义常量。</p>\n<p>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。</p>\n<p>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</p>\n<h3 id=\"LINE\"><a href=\"#LINE\" class=\"headerlink\" title=\"__LINE__\"></a>__LINE__</h3><p>文件中的当前行号。</p>\n<pre><code>&lt;?php\necho &#39;这是第 &quot; &#39;  . __LINE__ . &#39; &quot; 行&#39;;\n?&gt;\n</code></pre><h3 id=\"FILE\"><a href=\"#FILE\" class=\"headerlink\" title=\"__FILE__\"></a>__FILE__</h3><p>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</p>\n<p>自 PHP 4.0.2 起，<strong>FILE</strong> 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</p>\n<pre><code>&lt;?php\necho &#39;该文件位于 &quot; &#39;  . __FILE__ . &#39; &quot; &#39;;\n?&gt;\n</code></pre><h3 id=\"DIR\"><a href=\"#DIR\" class=\"headerlink\" title=\"__DIR__\"></a>__DIR__</h3><p>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。</p>\n<p>它等价于 dirname(<strong>FILE</strong>)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增）</p>\n<pre><code>&lt;?php\necho &#39;该文件位于 &quot; &#39;  . __DIR__ . &#39; &quot; &#39;;\n?&gt;\n</code></pre><h3 id=\"FUNCTION\"><a href=\"#FUNCTION\" class=\"headerlink\" title=\"__FUNCTION__\"></a>__FUNCTION__</h3><p>函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。</p>\n<pre><code>&lt;?php\nfunction test() &#123;\n    echo  &#39;函数名为：&#39; . __FUNCTION__ ;\n&#125;\ntest();\n?&gt;\n</code></pre><h3 id=\"CLASS\"><a href=\"#CLASS\" class=\"headerlink\" title=\"__CLASS__\"></a>__CLASS__</h3><p>类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。</p>\n<p>在 PHP 4 中该值总是小写字母的。类名包括其被声明的作用区域（例如 Foo\\Bar）。注意自 PHP 5.4 起 <strong>CLASS</strong> 对 trait 也起作用。当用在 trait 方法中时，<strong>CLASS</strong> 是调用 trait 方法的类的名字。</p>\n<pre><code>&lt;?php\nclass test &#123;\n    function _print() &#123;\n        echo &#39;类名为：&#39;  . __CLASS__ . &quot;&lt;br&gt;&quot;;\n        echo  &#39;函数名为：&#39; . __FUNCTION__ ;\n    &#125;\n&#125;\n$t = new test();\n$t-&gt;_print();\n?&gt;\n</code></pre><h3 id=\"TRAIT\"><a href=\"#TRAIT\" class=\"headerlink\" title=\"__TRAIT__\"></a>__TRAIT__</h3><p>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 traits。</p>\n<p>Trait 名包括其被声明的作用区域（例如 Foo\\Bar）。</p>\n<p>从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖。其行为 MyHelloWorld 类中定义的方法一致。优先顺序是当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法。</p>\n<pre><code>&lt;?php\nclass Base &#123;\n    public function sayHello() &#123;\n        echo &#39;Hello &#39;;\n    &#125;\n&#125;\n\ntrait SayWorld &#123;\n    public function sayHello() &#123;\n        parent::sayHello();\n        echo &#39;World!&#39;;\n    &#125;\n&#125;\n\nclass MyHelloWorld extends Base &#123;\n    use SayWorld;\n&#125;\n\n$o = new MyHelloWorld();\n$o-&gt;sayHello();\n?&gt;\n</code></pre><h3 id=\"METHOD\"><a href=\"#METHOD\" class=\"headerlink\" title=\"__METHOD__\"></a>__METHOD__</h3><p>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</p>\n<pre><code>&lt;?php\nfunction test() &#123;\n    echo  &#39;函数名为：&#39; . __METHOD__ ;\n&#125;\ntest();\n?&gt;\n</code></pre><h3 id=\"NAMESPACE\"><a href=\"#NAMESPACE\" class=\"headerlink\" title=\"__NAMESPACE__\"></a>__NAMESPACE__</h3><p>当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。</p>\n<h2 id=\"一些文章\"><a href=\"#一些文章\" class=\"headerlink\" title=\"一些文章\"></a>一些文章</h2><p><a href=\"https://www.runoob.com/php/php-intro.html\">https://www.runoob.com/php/php-intro.html</a></p>\n","text":"PHP编程 php是世界上最好的编程语言！ PHP 是服务器端脚本语言。 PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本...","permalink":"/post/php","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"编程","slug":"编程","count":11,"path":"api/categories/编程.json"},{"name":"php","slug":"编程/php","count":1,"path":"api/categories/编程/php.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PHP%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">PHP编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">PHP语法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">PHP变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">PHP 变量作用域</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-echo-%E5%92%8C-print-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">PHP echo 和 print 语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-EOF-heredoc-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">PHP EOF(heredoc) 使用说明</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PHP-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">PHP 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">PHP 资源类型</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PHP-%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">PHP 类型比较</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">PHP 常量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE-PHP-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">设置 PHP 常量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">PHP字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E5%B9%B6%E7%BD%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">PHP 并置运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-strlen\"><span class=\"toc-text\">PHP strlen()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-strpos\"><span class=\"toc-text\">PHP strpos()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">PHP运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">PHP 算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">PHP 赋值运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E9%80%92%E5%A2%9E-%E9%80%92%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">PHP 递增&#x2F;递减运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">PHP 比较运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">PHP 逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E6%95%B0%E7%BB%84%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">PHP 数组运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">PHP 条件语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">PHP数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-PHP-%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">在 PHP 中创建数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E6%95%B0%E5%80%BC%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">PHP 数值数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#count-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">count()函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">PHP 关联数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">遍历关联数组</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%C2%B7\"><span class=\"toc-text\">PHP - 数组排序函数·</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-%E8%B6%85%E7%BA%A7%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">PHP 超级全局变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">PHP 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-PHP-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">创建 PHP 函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">添加参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">返回值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-%E9%AD%94%E6%9C%AF%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">PHP 魔术常量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LINE\"><span class=\"toc-text\">__LINE__</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FILE\"><span class=\"toc-text\">__FILE__</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DIR\"><span class=\"toc-text\">__DIR__</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FUNCTION\"><span class=\"toc-text\">__FUNCTION__</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CLASS\"><span class=\"toc-text\">__CLASS__</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TRAIT\"><span class=\"toc-text\">__TRAIT__</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#METHOD\"><span class=\"toc-text\">__METHOD__</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NAMESPACE\"><span class=\"toc-text\">__NAMESPACE__</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E6%96%87%E7%AB%A0\"><span class=\"toc-text\">一些文章</span></a></li></ol></li></ol>","author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"java","uid":"745fa9d0dd7564f8475d86a8b9ad72f3","slug":"java反射","date":"2023-08-02T01:19:09.000Z","updated":"2023-09-17T13:16:19.310Z","comments":true,"path":"api/articles/java反射.json","keywords":null,"cover":null,"text":" 反射Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性。通过反射，Java 代码...","permalink":"/post/java反射","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":11,"path":"api/categories/编程.json"},{"name":"java","slug":"编程/java","count":6,"path":"api/categories/编程/java.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"}],"author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"安洁莉卡&罗兰","uid":"2cbb891df5dd9e9d79cc9907faec0ead","slug":"Ruina","date":"2023-07-28T13:40:40.000Z","updated":"2023-07-29T13:08:10.423Z","comments":true,"path":"api/articles/Ruina.json","keywords":null,"cover":[],"text":" 安洁莉卡最喜欢的诗 痛苦啊，你便是我的唯一除了你，我皆无欲求痛苦啊，你忠实的陪伴我，直至现在也没有一丝改变当我的灵魂徘徊于深渊之底唯有你相伴在我身旁，守护着我...","permalink":"/post/Ruina","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"这都是些什么啊","slug":"这都是些什么啊","count":1,"path":"api/categories/这都是些什么啊.json"},{"name":"Library of Ruina","slug":"这都是些什么啊/Library-of-Ruina","count":1,"path":"api/categories/这都是些什么啊/Library-of-Ruina.json"}],"tags":[{"name":"闲","slug":"闲","count":1,"path":"api/tags/闲.json"}],"author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}