{"title":"java流程控制和数组","uid":"af5b7b140c3f656ff60a269d72084da5","slug":"java流程控制和数组","date":"2023-09-01T12:49:52.000Z","updated":"2023-09-07T09:51:04.538Z","comments":true,"path":"api/articles/java流程控制和数组.json","keywords":null,"cover":[],"content":"<p>Java语言中的流程控制语句提供了控制程序执行顺序的手段。流程控制是程序代码的重要部分。<br>流程控制语句分为：分支语句、循环语句、异常处理语句和跳转语句。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64f48a1b661c6c8e5417788d.png\" alt=\"\"></p>\n<span id=\"more\"></span>\n<h2 id=\"分支语句\"><a href=\"#分支语句\" class=\"headerlink\" title=\"分支语句\"></a>分支语句</h2><h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if-else\"></a><code>if-else</code></h3><p><img src=\"https://pic.imgdb.cn/item/64f48a1b661c6c8e54177881.png\" alt=\"\"></p>\n<pre><code>if (condition1) &#123;\n    // 如果 condition1 为真，执行这里的代码块\n&#125; else if (condition2) &#123;\n    // 如果 condition2 为真，执行这里的代码块\n&#125; else if (condition3) &#123;\n    // 如果 condition3 为真，执行这里的代码块\n&#125; else &#123;\n    // 如果以上条件都不满足，执行这里的代码块\n&#125;\n</code></pre><h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a><code>switch</code></h3><pre><code>switch (intexpression)&#123;\ncase int1:\n    &lt;statement or block (1)&gt;\n    break;\ncase int2:\n    &lt;statement or block (2)&gt;\n    break;\ndefault:\n    &lt;statement or block(d)&gt;\n    break;\n&#125;\n</code></pre><h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a><code>while</code></h3><pre><code>while (expressBool)&#123;\n    statements;\n    [iteration;]\n&#125;\n</code></pre><h3 id=\"do-while\"><a href=\"#do-while\" class=\"headerlink\" title=\"do-while\"></a><code>do-while</code></h3><pre><code>do &#123;\n    statements;\n    [iteration;]\n&#125;while (expressBool);\n</code></pre><p>执行顺序是：</p>\n<ul>\n<li>执行初始化initalization(如果有);执行循环体statements</li>\n<li>先执行迭代部分iteration(如果有)，再计算表达式expressBool的值</li>\n<li>若expressBool值为true，则返回到2</li>\n<li>若expressBool值为false，则终止do-while循环</li>\n</ul>\n<h3 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a><code>for</code></h3><pre><code>for(initalize; condit; iterat) &#123;\n    statements;\n&#125;\n</code></pre><h3 id=\"break-continue\"><a href=\"#break-continue\" class=\"headerlink\" title=\"break, continue\"></a><code>break, continue</code></h3><p>break语句用于循环结构中，当程序执行break语句时，程序流程就结束循环<br>break语句也可以带语句标记，它的作用是结束该语句标记的语句块。<br>break语句使用格式如下:</p>\n<pre><code>break [outerLabel];\n</code></pre><p>continue语句用于循环结构中，当程序执行contiune语句时，程序流程就结束本次循环，充当了循环体的最后一条语句作用。<br>continue语句也可以带语句标记，它的作用是结束该语句标记的外层循环的本次循环。<br>continue语句使用格式如下:</p>\n<pre><code>continue [outerLabel];\n</code></pre><blockquote>\n<p>使用标签 <code>outerLoop</code> 跳出外层循环，从而结束整个循环的执行。</p>\n<pre><code>outerLoop:\nfor (int i = 0; i &lt; 5; i++) &#123;\n    innerLoop:\n    for (int j = 0; j &lt; 5; j++) &#123;\n        if (i * j &gt; 6) &#123;\n            break outerLoop; // 使用标签跳出外层循环\n        &#125;\n        System.out.println(i + &quot; * &quot; + j + &quot; = &quot; + (i * j));\n    &#125;\n&#125;\n</code></pre></blockquote>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>在Java中，数组是引用类型。数组类型是一种有序数据的集合，数组中在每一维上的元素具有相同的数据类型。数组通过数组名和它的下标对数组元素访问，数组元素的下标不能越界。<br>数组是一个对象，数组声明不能创建对象本身，而创建一个引用。数组元素由new语句或数组初始化软件动态分配。</p>\n<h3 id=\"数组声明\"><a href=\"#数组声明\" class=\"headerlink\" title=\"数组声明\"></a>数组声明</h3><p>Java的数组声明采用与C语言类似的形式。数组可分为一维数组和多维数组。它们的声明的形式为:</p>\n<pre><code>type arrayName[][].….[];\n</code></pre><p>或另一等价形式:</p>\n<pre><code>type[][..][] arrayName;\n</code></pre><p>e.g.</p>\n<pre><code>int count[];            //  一维整型数组count\nchar ch[][];            //  二维字符型数组ch\nfloat[] fNum;            //  一维浮点型数组fNum\n</code></pre><h3 id=\"数组实例化\"><a href=\"#数组实例化\" class=\"headerlink\" title=\"数组实例化\"></a>数组实例化</h3><p>在Java语言中，数组的声明是不能确定数组大小。数组的实例化即存储单元的分配是由new运算符实现。</p>\n<pre><code>arrayName = new type [arraySize1][][]…[];\n</code></pre><p>数组通过数组名和它的下标对数组元素访问，数组元素的下标不能越界。<br>数组实例化示例:</p>\n<pre><code>int[]a = new int[3];\n</code></pre><p>数组a有元素：a[0], a[1], a[2]，三个元素的值都为0。</p>\n<p>数组在创建时，也可显式初始化。<br>例: </p>\n<pre><code>int[]a = &#123;1,2,3&#125;;\n</code></pre><p>数组a的三个元素的值分别为1，2，3。</p>\n<p>数组实例化后就有了确定的元素,每个数组有一个属性length,其值就是这个数组的元素的数量。<br>例: <code>a.length</code>的值为3。</p>\n<h3 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h3><p>Java编程语言没有提供多维数组。它是通过创建数组的数组(和数组的数组的数组)。数组通过数组名和它的下标对数组元素访问，数组元素的下标不能越界。<br>数组是一个对象，数组声明不能创建对象本身，而创建一个引用。数组元素由new语句或数组初始化软件动态分配。</p>\n<p>虽然在声明数组的格式中，允许方括号在数组名的左边或者石边，但这种方式不适合数组句法的其它部分，必须首先将低位维初始化，再能对它后面的各位依次初始化。利用对每维元素的分步初始化，可以创建非知矩形数组的数组。</p>\n<pre><code>// 声明一个三维整数数组\nint[][][] threeDArray = new int[2][3][4];\n\n// 初始化三维数组\nthreeDArray[0][0][0] = 1;\nthreeDArray[0][0][1] = 2;\n// ...\n\n// 声明并初始化三维数组\nint[][][] anotherThreeDArray = &#123;&#123;&#123;1, 2&#125;, &#123;3, 4&#125;&#125;, &#123;&#123;5, 6&#125;, &#123;7, 8&#125;&#125;&#125;;\n\n// 访问三维数组\nint value = threeDArray[1][2][3]; // 访问第二维度的第三行第四列的元素\n</code></pre><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>字符串是一串字符组成的数据，并用<code>&quot;&quot;</code>包括起来。字符串常量是String类型的对象，类String是Java语言的基础数据类型，它具有一定的特殊性。<br>Java编译器在对字符串数据与其它类型数据使用“+”运算符连接操作编译时，总是首先将其它类型数据转换为字符串类型，然后再进行字符串连接。</p>\n<pre><code>&quot;Age: &quot;+18 == &quot;Age: 18&quot;\n</code></pre><h3 id=\"相关方法\"><a href=\"#相关方法\" class=\"headerlink\" title=\"相关方法\"></a>相关方法</h3><pre><code>char charAt(int where)\nvoid getChars(int sourceStart, int sourceEnd, char target[], int targetstart)byte[] getBytes()\nchar[] tocharArray( )boolean equals(Object str)\nboolean equalslgnorecase(String str)boolean startsWith(String str)\nboolean endsWith(String str)int indexof(int ch)\nint lastindexOf(int ch)\nstring substring(int startIndex)\nstring substring(int startIndex, int endIndex)\n</code></pre><p>字符串与基本数据的转化：</p>\n<pre><code>String to lnteger\npublic static int parselnt(String s)\nlnteger to String\npublic static String valueOf(int n)\n</code></pre><h4 id=\"StringBuffer\"><a href=\"#StringBuffer\" class=\"headerlink\" title=\"StringBuffer\"></a><code>StringBuffer</code></h4><p>在Java中，<code>StringBuffer</code> 是一个用于操作可变字符串的类。与 <code>String</code> 不同，<code>StringBuffer</code> 允许你修改字符串的内容，而不必创建新的字符串对象。这对于需要频繁修改字符串的情况非常有用，因为 <code>String</code> 对象是不可变的，每次修改都会创建一个新的字符串对象。</p>\n<p>以下是 <code>StringBuffer</code> 类的基本用法和一些常用方法：</p>\n<p><strong>创建 <code>StringBuffer</code> 对象：</strong></p>\n<pre><code>javaCopy code\nStringBuffer sb = new StringBuffer();\n</code></pre><p>或者使用初始字符串创建 <code>StringBuffer</code> 对象：</p>\n<pre><code>javaCopy code\nStringBuffer sb = new StringBuffer(&quot;Hello&quot;);\n</code></pre><p><strong>常用方法：</strong></p>\n<ol>\n<li><strong>append(String str)：</strong> 将指定的字符串追加到 <code>StringBuffer</code> 的末尾。</li>\n</ol>\n<pre><code>javaCopy code\nsb.append(&quot;World&quot;);\n</code></pre><ol>\n<li><strong>insert(int offset, String str)：</strong> 在指定位置插入字符串。</li>\n</ol>\n<pre><code>javaCopy code\nsb.insert(5, &quot;Java&quot;);\n</code></pre><ol>\n<li><strong>delete(int start, int end)：</strong> 删除指定范围内的字符。</li>\n</ol>\n<pre><code>javaCopy code\nsb.delete(0, 5); // 删除前五个字符\n</code></pre><ol>\n<li><strong>deleteCharAt(int index)：</strong> 删除指定位置的字符。</li>\n</ol>\n<pre><code>javaCopy code\nsb.deleteCharAt(5); // 删除第六个字符\n</code></pre><ol>\n<li><strong>replace(int start, int end, String str)：</strong> 用新的字符串替换指定范围内的字符。</li>\n</ol>\n<pre><code>javaCopy code\nsb.replace(0, 5, &quot;Hola&quot;); // 将前五个字符替换为 &quot;Hola&quot;\n</code></pre><ol>\n<li><strong>length()：</strong> 返回当前字符串的长度。</li>\n</ol>\n<pre><code>javaCopy code\nint len = sb.length();\n</code></pre><ol>\n<li><strong>toString()：</strong> 将 <code>StringBuffer</code> 对象转换为 <code>String</code> 对象。</li>\n</ol>\n<pre><code>javaCopy code\nString result = sb.toString();\n</code></pre>","text":"Java语言中的流程控制语句提供了控制程序执行顺序的手段。流程控制是程序代码的重要部分。流程控制语句分为：分支语句、循环语句、异常处理语句和跳转语句。 分支语句...","permalink":"/post/java流程控制和数组","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"java","slug":"编程/java","count":6,"path":"api/categories/编程/java.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">分支语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if-else\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#switch\"><span class=\"toc-text\">switch</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">循环语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#while\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#do-while\"><span class=\"toc-text\">do-while</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for\"><span class=\"toc-text\">for</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#break-continue\"><span class=\"toc-text\">break, continue</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">数组声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E5%8C%96\"><span class=\"toc-text\">数组实例化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">多维数组</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">相关方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#StringBuffer\"><span class=\"toc-text\">StringBuffer</span></a></li></ol></li></ol></li></ol>","author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"java异常处理","uid":"ee304ea14cdfef400724bb1ab6bff757","slug":"java异常处理","date":"2023-09-03T02:32:19.000Z","updated":"2023-09-07T09:51:03.538Z","comments":true,"path":"api/articles/java异常处理.json","keywords":null,"cover":null,"text":"Java异常处理在Java中，异常处理是一种机制，用于处理程序运行时可能出现的错误或异常情况，以便程序能够优雅地处理这些问题而不会崩溃。 try-catchtr...","permalink":"/post/java异常处理","photos":[],"count_time":{"symbolsCount":698,"symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"java","slug":"编程/java","count":6,"path":"api/categories/编程/java.json"}],"tags":[],"author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"java语言基础","uid":"a8aa18bf0cb5c42542c071a3bedb754a","slug":"java语言基础","date":"2023-09-01T02:01:41.000Z","updated":"2023-09-08T04:02:13.515Z","comments":true,"path":"api/articles/java语言基础.json","keywords":null,"cover":[],"text":"我超，java Java程序的基本结构Java语言的源程序是一个或多个以.java为扩展名的文件，Java源程序中可包含三个基本部分: 一个包声明package...","permalink":"/post/java语言基础","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"java","slug":"编程/java","count":6,"path":"api/categories/编程/java.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"}],"author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}