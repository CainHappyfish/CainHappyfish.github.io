{"title":"java","uid":"745fa9d0dd7564f8475d86a8b9ad72f3","slug":"java反射","date":"2023-08-02T01:19:09.000Z","updated":"2023-09-17T13:16:19.310Z","comments":true,"path":"api/articles/java反射.json","keywords":null,"cover":null,"content":"<span id=\"more\"></span>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p>Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性。通过反射，Java 代码可以发现有关已加载类的字段，方法和构造函数的信息，并可以在安全限制内对这些字段，方法和构造函数进行操作。</p>\n<h3 id=\"反射机制的相关类\"><a href=\"#反射机制的相关类\" class=\"headerlink\" title=\"反射机制的相关类\"></a>反射机制的相关类</h3><p>与Java反射相关的类如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class类</td>\n<td>代表类的实体，在运行的Java应用程序中表示类和接口</td>\n</tr>\n<tr>\n<td>Field类</td>\n<td>代表类的成员变量（成员变量也称为类的属性）</td>\n</tr>\n<tr>\n<td>Method类</td>\n<td>代表类的方法</td>\n</tr>\n<tr>\n<td>Constructor类</td>\n<td>代表类的构造方法</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a><code>class</code></h3><ul>\n<li>获得类相关的方法</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>asSubclass(Class clazz)</td>\n<td>把传递的类的对象转换成代表其子类的对象</td>\n</tr>\n<tr>\n<td>Cast</td>\n<td>把对象转换成代表类或是接口的对象</td>\n</tr>\n<tr>\n<td>getClassLoader()</td>\n<td>获得类的加载器</td>\n</tr>\n<tr>\n<td>getClasses()</td>\n<td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td>\n</tr>\n<tr>\n<td>getDeclaredClasses()</td>\n<td>返回一个数组，数组中包含该类中所有类和接口类的对象</td>\n</tr>\n<tr>\n<td>forName(String className)</td>\n<td>根据类名返回类的对象</td>\n</tr>\n<tr>\n<td>getName()</td>\n<td>获得类的完整路径名字</td>\n</tr>\n<tr>\n<td>newInstance()</td>\n<td>创建类的实例</td>\n</tr>\n<tr>\n<td>getPackage()</td>\n<td>获得类的包</td>\n</tr>\n<tr>\n<td>getSimpleName()</td>\n<td>获得类的名字</td>\n</tr>\n<tr>\n<td>getSuperclass()</td>\n<td>获得当前类继承的父类的名字</td>\n</tr>\n<tr>\n<td>getInterfaces()</td>\n<td>获得当前类实现的类或是接口</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>获得类中属性相关的方法</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getField(String name)</td>\n<td>获得某个公有的属性对象</td>\n</tr>\n<tr>\n<td>getFields()</td>\n<td>获得所有公有的属性对象</td>\n</tr>\n<tr>\n<td>getDeclaredField(String name)</td>\n<td>获得某个属性对象</td>\n</tr>\n<tr>\n<td>getDeclaredFields()</td>\n<td>获得所有属性对象</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><strong>获得类中注解相关的方法</strong></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getAnnotation(Class annotationClass)</td>\n<td>返回该类中与参数类型匹配的公有注解对象</td>\n</tr>\n<tr>\n<td>getAnnotations()</td>\n<td>返回该类所有的公有注解对象</td>\n</tr>\n<tr>\n<td>getDeclaredAnnotation(Class annotationClass)</td>\n<td>返回该类中与参数类型匹配的所有注解对象</td>\n</tr>\n<tr>\n<td>getDeclaredAnnotations()</td>\n<td>返回该类所有的注解对象</td>\n</tr>\n</tbody>\n</table>\n</div>\n","text":" 反射Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性。通过反射，Java 代码...","permalink":"/post/java反射","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"java","slug":"编程/java","count":6,"path":"api/categories/编程/java.json"}],"tags":[{"name":"java","slug":"java","count":4,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84\"><span class=\"toc-text\">反射</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB\"><span class=\"toc-text\">反射机制的相关类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#class\"><span class=\"toc-text\">class</span></a></li></ol></li></ol>","author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"多方安全计算介绍","uid":"02610888fe553149eda2045d277295dd","slug":"多方安全计算基础","date":"2023-08-20T02:47:19.000Z","updated":"2023-09-17T13:19:58.186Z","comments":true,"path":"api/articles/多方安全计算基础.json","keywords":null,"cover":[],"text":"多方安全计算安全多方计算(MPC)已经从20世纪80年代的一种理论发展成为今天构建真实系统的工具。在过去的十年中，MPC已经成为理论和应用密码学中最活跃的研究领...","permalink":"/post/多方安全计算基础","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Crypto","slug":"Crypto","count":2,"path":"api/categories/Crypto.json"},{"name":"多方安全计算","slug":"Crypto/多方安全计算","count":2,"path":"api/categories/Crypto/多方安全计算.json"}],"tags":[{"name":"Crypto","slug":"Crypto","count":2,"path":"api/tags/Crypto.json"},{"name":"MPC","slug":"MPC","count":1,"path":"api/tags/MPC.json"}],"author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"php-Basic","uid":"49195eb2df2edd82dc60ba6a843fc68d","slug":"php","date":"2023-08-02T01:18:49.000Z","updated":"2023-09-17T13:07:47.008Z","comments":true,"path":"api/articles/php.json","keywords":null,"cover":null,"text":"PHP编程 php是世界上最好的编程语言！ PHP 是服务器端脚本语言。 PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本...","permalink":"/post/php","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"php","slug":"编程/php","count":1,"path":"api/categories/编程/php.json"}],"tags":[],"author":{"name":"C4IN","slug":"blog-author","avatar":"/pic/au.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}